<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>MNIST</title>
        <para>
            Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel,
            <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link> Háttérként ezt vetítsük le:
            https://prezi.com/0u8ncvvoabcr/no-programming-programming/
        </para>
        <para>
            A feladatban egy neurális hálózatot fogunk tanítani mégpedig az MNIST adatbázisának felhasználásával. Ez az adatbázis kézzel írott számokról tartalmaz képeket. A kód alapja
            a Tensorflow hivatalos repojában megtalálható, ez a változat annyival van kiegészítve, hogy a saját kézzel írott számokat is felismerje.
        </para>
        <para>
            <programlisting>
from tensorflow.examples.tutorials.mnist import input_data
            </programlisting>
            Ezzel a sorral importáljuk a mintákat, amik a tanításhoz szükségesek.
        </para>
        <para>
            A modell implementálásához létrehozunk egy x és y változót, valamint egy W-t a súlyoknak és b-t a bias értékeknek. A kereszt entrópia implementálásához szükségünk lesz egy y_placeholderre is.
            <programlisting language="python">
  x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b
  
  y_ = tf.placeholder(tf.float32, [None, 10])         
            </programlisting>
            Az y-ban tároljuk el az általunk kiszámolt eloszlást
        </para>
        <para>
            Nézzük meg hogyan zajlik a tanítás:
            <programlisting language="python">
for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})            
            </programlisting>
            Ezerszer fogjuk végrehajtani. Minden alkalommal kiválasztunk random 100 batch-et az adatbázisból, amit átadunk a változóknak és újól kiszámolunk egy y-t. Majd az y_ segítségével kiszámoljuk az átlag veszteséget és csökkentjük.
        </para>
        <para>
            <programlisting language="python">
		print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
		
img = mnist.test.images[42]
image = img

matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
matplotlib.pyplot.savefig("4.png")  
matplotlib.pyplot.show()

classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
print("----------------------------------------------------------")

print("-- A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
img = readimg()
image = img.eval()
image = image.reshape(28*28)
matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm.binary)
matplotlib.pyplot.savefig("8.png")  
matplotlib.pyplot.show()

classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
print("----------------------------------------------------------")

            </programlisting>
            
            A tanítás után megnézzük, hogy felismeri-e a 42. tesztképet. A kód érszlet alján pedig láthatjuk, hogyan van implementálva a saját kép felismerése.
        </para>
        <para>
            <programlisting language="python">
def readimg():
    file = tf.read_file("sajat8as.png")
    img = tf.image.decode_png(file, 1)
    return img
            </programlisting>
            A readimg-vel olvassuk be a saját 8-asunkat. Szürke árnyalatú képre lesz szükségünk, ezért a tf.image.decode_png-nak 1-est adunk paraméterül.
        </para>
        <para>
            Látható, hogy a 4-est felismert, azonban a saját készítésű 8-asomat sajnos nem sikerült neki.
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mnist.png" format="PNG" scale="25"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>
    
    <section>
        <title>
            <emphasis role="cadiumgreen">CIFAR-10</emphasis>
        </title>
        <para>
            Az alap feladat megoldása, +saját fotót is ismerjen fel,
            <link xlink:href="https://progpater.blog.hu/2016/12/10/hello_samu_a_cifar-10_tf_tutorial_peldabol">https://progpater.blog.hu/2016/12/10/hello_samu_a_cifar-10_tf_tutorial_peldabol</link>
        </para>
        <para>
            A CIFAR-10 60000 db képet tartalmaz, amit gépi tanulásnál alkalmaznak. Ezek 32x32 színes képek és mindegyik kép egy osztályba van besorolva.
        </para>
        <para>
            A program futtatáskor megnézi, hogy rendelkezünk-e a képes adatbázissal, ha nem, akkor letölti, kicsomagolja. Annak érdekében, hogy biztos megvannak a képek, néhényat megjelenítünk matplotlib és numpy segítségével.
            <programlisting language="Python"><![CDATA[
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)
testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)
classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
def imshow(img):
    img = img / 2 + 0.5     
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()
dataiter = iter(trainloader)
images, labels = dataiter.next()
imshow(torchvision.utils.make_grid(images))
print(' '.join('%5s' % classes[labels[j]] for j in range(4)))]]>
</programlisting>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/cifar1.png" format="PNG" scale="35"/>
                </imageobject>
            </mediaobject>
            
        </para>
        <para>
            Miután megvannak a képek, a neurális háló megteremtése a következő lépés.
            <programlisting language="Python"><![CDATA[
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
net = Net()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)]]>
</programlisting>
        </para>
        <para>
            Az osztályok betanítása eegy for ciklussal járjuk be a képeket. Az adatveszteséget is kiiratjuk. Amennyiben sikeres a tanítás lementjük a modellt torch segítségével.
            <programlisting language="Python"><![CDATA[
for epoch in range(2):  
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        
        inputs, labels = data
        optimizer.zero_grad()
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        if i % 2000 == 1999:    
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0
print('Finished Training')
PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)]]>
</programlisting>
        </para>
        <para>
            Teszteljük a neurális hálót. Kiválasztunk 4 képet, kiiratjuk a tényleges osztályát, majd néhány másdoperc után megkapjuk a tippeket is.
            <programlisting language="Python"><![CDATA[
dataiter = iter(testloader)
images, labels = dataiter.next()
imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))
net = Net()
net.load_state_dict(torch.load(PATH))
outputs = net(images)
_, predicted = torch.max(outputs, 1)
print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]
                              for j in range(4)))]]>
</programlisting>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/cifar2.png" format="PNG" scale="35"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            Végül megkapjuk azt is, hogy osztályonként milyen pontossággal rendelkezett.
            <programlisting language="Python"><![CDATA[
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))
class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1
for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))]]>
</programlisting>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/cifar3.png" format="PNG" scale="50"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>
    
    <section>
        <title>Android telefonra a TF objektum detektálója</title>    
        <para>
            Telepítsük fel, próbáljuk ki!
        </para>
        <para>
            A TensorFlow segítségével elérhetőek olyan applikációk Androidos készülékekre, mellyel képes lesz 
            felismerni egyes objektumokat. Ezt a hátsó kamerán keresztül próbálja megtenni valós időben. A 
            program felismerte az esetek többségében az elektronikai cikkeket, például a laptopomat és az egeret.
            Mivel nem állt rendelkezésemre olyan eszköz, ami kompatibilis lett volna a TensorFlow hivatalos 
            tárgyfelismerőjével, ezért másik app letöltésére kényszerültem. 
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/tensor1.png" format="PNG" scale="60"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/tensor2.png" format="PNG" scale="60"/>
                </imageobject>
            </mediaobject>

            Voltak tárgyak, amit könnyen felismert, azonban volt amit az esetek kis százalékában tudott csak felismerni. Illetve képes 
            egyszerre több tárgyat is felismerni.
        </para>
    </section>		
</chapter>
